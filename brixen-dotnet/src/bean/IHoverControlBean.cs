using System;
using OpenQA.Selenium;

namespace Org.Brixen.Bean {

	/// <summary>
	/// Defines the contract for a data transfer object used to construct a <b>Selenium</b> page object that models a
	/// web control that has meaningful side effects whenever it is moused over.
	/// </summary>
	public interface IHoverControlBean : IControlBean {

		/// <summary>
		/// Gets or sets the element to send the focus to when unhovering the web control.
		/// <para>
		/// The unhover element should be carefully chosen to ensure that any content that is rendered visible by 
		/// mousing over the web control is rendered invisible and that the mouseover action on the unhover element 
		/// does not trigger visibility for any other content panes that you wish to remain hidden or trigger any other 
		/// undesired side effects.
		/// </para>
		/// </summary>
		/// <value>The <c>WebElement</c> to mouse over in order to unhover the web control by ensuring that the mouse 
		/// is focused in a safe location away from it.</value>
		IWebElement UnhoverElement {
			get;
			set;
		}

		/// <summary>
		/// Gets or sets the Javascript hover workaround flag for the web control.
		/// <para>
		/// When the Javascript hover workaround flag is enabled, a hover over the web control will be performed with 
		/// Javascript rather than the <see cref="OpenQA.Selenium.IWebElement.Click()"/> method. This is useful in 
		/// circumstances where the mouse over function fails silently, that is the 
		/// <see cref="OpenQA.Selenium.IWebElement.Click()"/> runs without throwing any 
		/// <c>Exceptions</c>, but the element is not really moused over.
		/// </para>
		/// </summary>
		/// <value>If <c>true</c>, the Javascript hover workaround is enabled; <c>false</c> otherwise.</value>
		bool HoverWithJavascript {
			get;
			set;
		}	

		/// <summary>
		/// Gets or sets the Javascript hover workaround flag for the unhover element which is used to focus the mouse 
		/// in a safe location away from the web control.
		/// <para>
		/// When the Javascript hover workaround flag is enabled, a hover over the unhover element will be performed 
		/// with Javascript rather than the <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> 
		/// method. This is useful in circumstances where the mouse over function fails silently, that is the 
		/// <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> runs without throwing any 
		/// <c>Exceptions</c>, but the element is not really moused over.
		/// </para>
		/// </summary>
		/// <value>If <c>true</c>, the Javascript unhover workaround is enabled; <c>false</c> otherwise.</value>
		bool UnhoverWithJavascript {
			get;
			set;
		}

		/// <summary>
		/// Gets or sets the <see cref="OpenQA.Selenium.IWebElement.Click()"/> action workaround for forcing the mouse 
		/// to focus on the web control.
		/// <para>
		/// Note: It is best to use this in situations where both the 
		/// <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> method and the
		/// Javascript hover workaround fail silently, that is 
		/// <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> and the Javascript hover
		/// workaround run without throwing any <c>Exceptions</c>, but the element is not really moused over. This will
		/// allow automation of test cases which are dependent on the side effects generated by the hover action, but 
		/// are not related to testing that the hover action alone triggers the desired side effects. In such cases, it 
		/// would be prudent to manually test the hover action alone in the environment(s) where neither the
		/// <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> nor the Javascript hover 
		/// workaround trigger the mouseover event and the expected side effect(s).
		/// </para>
		/// </summary>
		/// <value>If <c>true</c>, the <see cref="OpenQA.Selenium.IWebElement.Click()"/> action workaround is enabled; 
		/// <c>false</c> otherwise.</value>
		bool ClickInsteadOfHover {
			get;
			set;
		}	

		/// <summary>
		/// Gets or sets the Javascript click action workaround for forcing the mouse to focus on the web control.
		/// <para>
		/// Note: It is best to use this in situations where the 
		/// <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> method, the Javascript 
		/// hover workaround and the <see cref="OpenQA.Selenium.IWebElement.Click()"/> method all fail silently, that 
		/// is they all run without throwing any <c>Exceptions</c>, but the element is not really moused over or 
		/// clicked. This will allow automation of test cases which are dependent on the side effects generated by the 
		/// hover action, but are not related to testing that the hover action alone triggers the desired side effects. 
		/// In such cases, it would be prudent to manually test the hover action alone in the environment(s) where 
		/// neither the <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> nor the Javascript 
		/// hover workaround trigger the mouseover event and the expected side effect(s).
		/// </summary>
		/// <value>If <c>true</c>, the Javascript click action workaround is enabled; <c>false</c> otherwise.</value>
		bool ClickWithJavascriptInsteadOfHover {
			get;
			set;
		}
			
		/// <summary>
		/// Gets or sets the <see cref="OpenQA.Selenium.IWebElement.Click()"/> action workaround for the unhover 
		/// element which is used to focus the mouse in a safe location away from the web control.
		/// <para>
		/// Care should be taken to ensure that clicking on the unhover element does not trigger undesired side effects 
		/// and serves only to force the mouse away from the web control. This action is riskier than hovering the 
		/// mouse over the unhover element, so it should be used in situations where the 
		/// <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> method and the Javascript hover 
		/// workaround fail silently, that is <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> 
		/// and the Javascript hover workaround run without throwing any <c>Exceptions</c>, but the element is not 
		/// really moused over.
		/// </summary>
		/// <value>If <c>true</c>, the unhover with click action workaround is enabled; <c>false</c> otherwise.</value>
		bool UnhoverWithClickInstead {
			get;
			set;
		}

		/// <summary>
		/// Gets or sets the Javascript click action workaround for the unhover element which is used to focus the
		/// mouse in a safe location away from the web control.
		/// <para>
		/// Care should be taken to ensure that clicking on the unhover element does not trigger undesired side effects 
		/// and serves only to force the mouse away from the web control. This action is riskier than hovering the 
		/// mouse over the unhover element, so it should be used in situations where the 
		/// <cref="OpenQA.Selenium.Interactions.Actions.MoveToElement(IWebElement)"/> method, the Javascript hover 
		/// workaround and the <see cref="OpenQA.Selenium.IWebElement.Click()"/> method fail silently, that is they 
		/// run without throwing any <c>Exceptions</c>, but the element is not really moused over or clicked.
		/// </summary>
		/// <value>If <c>true</c>, the Javascript click action workaround for the unhover element is enabled; 
		/// <c>false</c> otherwise</value>
		bool UnhoverWithJavascriptClickInstead {
			get;
			set;
		}	
	}
}

